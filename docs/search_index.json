[["index.html", "Python医療データ分析本をRでやる", " Python医療データ分析本をRでやる gg_hatano 2022-02-21 "],["00.html", "Chapter 1 はじめに 1.1 この本でやること 1.2 注意点", " Chapter 1 はじめに 1.1 この本でやること Pythonによる医療データ分析入門―pandas＋擬似レセプト編をRでやってみる、という内容です。 ソースコードはGitHubにも置いていきます。 1.2 注意点 Rでやるので、参考文献と比べて実装方針が異なるところはあると思います。 "],["01-01.html", "Chapter 2 死亡率の推定 2.1 「日本版死亡データベース」の利用", " Chapter 2 死亡率の推定 1章です。 2.1 「日本版死亡データベース」の利用 健保組合データを擬似生成するために、出生・志望の公的統計を利用して、乱数でシミュレーションする。 2.1.1 出生率データの取得 IPSSが公開している、年次出生数のデータを利用する。 library(readr) library(dplyr) url = &#39;http://www.ipss.go.jp/p-toukei/JMD/00/STATS/Births.txt&#39; dat = read.table(url, skip=2, header = TRUE) dat %&gt;% head ## Year Female Male Total ## 1 1947 1301806 1376986 2678792 ## 2 1948 1303060 1378564 2681624 ## 3 1949 1316630 1380008 2696638 ## 4 1950 1134396 1203111 2337507 ## 5 1951 1043048 1094641 2137689 ## 6 1952 977101 1028061 2005162 ある年に、FemaleとMaleが何人生まれたかのデータになっている。 性別列を作って縦に持っておく。 library(tidyr) library(magrittr) dat %&gt;% pivot_longer(cols = c(&quot;Male&quot;, &quot;Female&quot;), names_to = &quot;Sex&quot;, values_to = &quot;Life&quot;) %&gt;% mutate(Sex = if_else(Sex == &quot;Female&quot;, &quot;F&quot;, &quot;M&quot;)) -&gt; dat dat ## # A tibble: 146 × 4 ## Year Total Sex Life ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 1947 2678792 M 1376986 ## 2 1947 2678792 F 1301806 ## 3 1948 2681624 M 1378564 ## 4 1948 2681624 F 1303060 ## 5 1949 2696638 M 1380008 ## 6 1949 2696638 F 1316630 ## 7 1950 2337507 M 1203111 ## 8 1950 2337507 F 1134396 ## 9 1951 2137689 M 1094641 ## 10 1951 2137689 F 1043048 ## # … with 136 more rows 乱数でシミュレーションをするために、累積比率を出しておく dat %&lt;&gt;% arrange(Sex, Year) dat %&lt;&gt;% mutate(ratio = Life / sum(Life)) %&gt;% mutate(cum_sum = cumsum(ratio)) dat %&gt;% head(100) ## # A tibble: 100 × 6 ## Year Total Sex Life ratio cum_sum ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1947 2678792 F 1301806 0.0118 0.0118 ## 2 1948 2681624 F 1303060 0.0119 0.0237 ## 3 1949 2696638 F 1316630 0.0120 0.0357 ## 4 1950 2337507 F 1134396 0.0103 0.0460 ## 5 1951 2137689 F 1043048 0.00949 0.0555 ## 6 1952 2005162 F 977101 0.00889 0.0644 ## 7 1953 1868040 F 910516 0.00829 0.0727 ## 8 1954 1769580 F 858368 0.00781 0.0805 ## 9 1955 1730692 F 841022 0.00765 0.0882 ## 10 1956 1665278 F 809194 0.00736 0.0955 ## # … with 90 more rows dat %&gt;% select(-Total) %&gt;% write.csv(&quot;./data/ipss_birth.csv&quot;, row.names=FALSE, quote = FALSE) 累積確率分布を作る。これにより、一様乱数(y軸:0-1)から、対応する行番号が得られて、 行番号から、(出生年,性別)を得ることができる。 欲しい人数分だけ一様乱数を取れば、出生のデータが得られる。 library(ggplot2) dat = read_csv(&quot;./data/ipss_birth.csv&quot;) ## Rows: 146 Columns: 5 ## ─ Column specification ────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): Sex ## dbl (4): Year, Life, ratio, cum_sum ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. dat %&gt;% mutate(x_axis = paste(Year, Sex, sep=&quot;&quot;)) %&gt;% mutate(row_num = 1:nrow(.)) %&gt;% ggplot() + geom_line(aes(x = row_num, y = cum_sum), stat = &quot;identity&quot;) + annotate(&quot;segment&quot;,x=1,xend=96,y=0.7,yend=0.7,colour=&quot;blue&quot;, size=1, arrow=arrow()) + annotate(&quot;segment&quot;,x=98,xend=98,y=0.7,yend=0.0,colour=&quot;blue&quot;, size=1,arrow=arrow()) + annotate(&quot;text&quot;, x=20, y=0.75, parse=TRUE, label=&quot;&#39;Random Number 0.7&#39;&quot;) + annotate(&quot;text&quot;, x=125, y=0.2, parse=TRUE, label=&quot;&#39;Rownum: 98 -&gt; 1971-Male&#39;&quot;) + ggtitle(&quot;Cumulative ratio of Population Birth&quot;) これを利用して、出生のシミュレーションができる。 2.1.2 死亡データの取得と整形 次は、死亡率を算出して、死亡のシミュレーションを行う。 url_death_rate = &quot;http://www.ipss.go.jp/p-toukei/JMD/00/STATS/Mx_1x1.txt&quot; dat = read.table(url_death_rate, skip=2, header = TRUE) dat %&gt;% str ## &#39;data.frame&#39;: 8103 obs. of 5 variables: ## $ Year : int 1947 1947 1947 1947 1947 1947 1947 1947 1947 1947 ... ## $ Age : chr &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; ... ## $ Female: chr &quot;0.087401&quot; &quot;0.033723&quot; &quot;0.016994&quot; &quot;0.011412&quot; ... ## $ Male : chr &quot;0.099181&quot; &quot;0.034697&quot; &quot;0.016804&quot; &quot;0.011461&quot; ... ## $ Total : chr &quot;0.093432&quot; &quot;0.034220&quot; &quot;0.016897&quot; &quot;0.011437&quot; ... 死亡率のデータは、Year年にX才だった人が1年後に死んでいる確率を表している。(本当に？) 今回は簡単のために、2016年の死亡率でシミュレーションを行う。 dat %&lt;&gt;% filter(Year == 2016) %&gt;% select(-Year) %&gt;% select(-Total) Ageがcharになっているので、確認する。 dat$Age %&gt;% table ## . ## 0 1 10 100 101 102 103 104 105 106 107 108 109 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 11 110+ 12 13 14 15 16 17 18 19 2 20 21 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 22 23 24 25 26 27 28 29 3 30 31 32 33 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 34 35 36 37 38 39 4 40 41 42 43 44 45 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 46 47 48 49 5 50 51 52 53 54 55 56 57 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 58 59 6 60 61 62 63 64 65 66 67 68 69 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 7 70 71 72 73 74 75 76 77 78 79 8 80 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 81 82 83 84 85 86 87 88 89 9 90 91 92 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 93 94 95 96 97 98 99 ## 1 1 1 1 1 1 1 110+があるので、これは簡単のために111才にしておく。 dat %&lt;&gt;% mutate(Age = if_else(Age == &quot;110+&quot;, &quot;111&quot;, Age)) %&gt;% mutate(Age = as.integer(Age)) dat %&lt;&gt;% mutate(Anb = Age) %&gt;% select(-Age) dat %&gt;% head ## Female Male Anb ## 1 0.002028 0.001995 0 ## 2 0.000313 0.000340 1 ## 3 0.000174 0.000178 2 ## 4 0.000098 0.000133 3 ## 5 0.000087 0.000095 4 ## 6 0.000084 0.000101 5 AnbとAlbについては、あとで追記する。Anbなので、Albに直す。 \\(x\\)才のAnb死亡率\\(q_x\\)とすると、Alb死亡率は、\\(\\frac{q_x+q_{x+1}}{2}\\)になる。 dat %&lt;&gt;% mutate(Female = as.numeric(Female)) %&gt;% mutate(Male = as.numeric(Male)) %&gt;% mutate(lead_Female = lead(Female)) %&gt;% mutate(lead_Male = lead(Male)) %&gt;% mutate(F = (Female + lead_Female)/2) %&gt;% mutate(M = (Male + lead_Male)/2) %&gt;% mutate(Alb = Anb) %&gt;% select(Alb,F,M) dat %&gt;% head ## Alb F M ## 1 0 0.0011705 0.0011675 ## 2 1 0.0002435 0.0002590 ## 3 2 0.0001360 0.0001555 ## 4 3 0.0000925 0.0001140 ## 5 4 0.0000855 0.0000980 ## 6 5 0.0000815 0.0001060 年次死亡率を可視化してみる。 横軸が年齢、縦軸が1年以内に死亡する確率。 dat %&gt;% pivot_longer(cols=c(&quot;F&quot;,&quot;M&quot;), names_to = &quot;Sex&quot;, values_to = &quot;Mortarity&quot;) %&gt;% ggplot(aes(x = Alb, y = Mortarity, group = Sex, color = Sex)) + geom_line() + geom_hline(yintercept = 1.0, linetype = &quot;dashed&quot;) + annotate(&quot;text&quot;, x = 10, y = 1.05, label = &#39;Mortarity: 1.0&#39;) + ggtitle(&quot;Mortarity&quot;) ## Warning: Removed 2 row(s) containing missing values (geom_path). 高齢部分が不自然だが、そういうものらしい。100才以上は使わない、として切り捨てる。 また、年次死亡率を月次死亡率に変換する。 年次死亡率を\\(y\\)、月次死亡率を\\(x\\)とすると、 \\(y = 1 - (1-x)^{12}\\)なので、\\(x\\)について解くと、\\(x = 1 - (1-y)^{0.08...}\\)になる。これにより、月次死亡率が得られる。 dat %&lt;&gt;% filter(Alb &lt; 100) dat %&lt;&gt;% mutate(F = 1 - (1-F)**(1/12)) %&gt;% mutate(M = 1 - (1-M)**(1/12)) dat %&gt;% write.csv(&quot;./data/ipss_mortality.csv&quot;, quote=F, row.names = F) dat %&gt;% mutate(F = round(F, 7)) %&gt;% mutate(M = round(M, 7)) %&gt;% head ## Alb F M ## 1 0 9.76e-05 9.73e-05 ## 2 1 2.03e-05 2.16e-05 ## 3 2 1.13e-05 1.30e-05 ## 4 3 7.70e-06 9.50e-06 ## 5 4 7.10e-06 8.20e-06 ## 6 5 6.80e-06 8.80e-06 おわり 2.1.3 ここまでやったこと 公的統計の取得 出生率データの作成 死亡率データの作成 2.1.4 つぎにやること 擬似レセプトデータを作るために… - 出生のシミュレーション - 死亡のシミュレーシ "],["01-02.html", "2.2 出生・死亡のシミュレーション", " 2.2 出生・死亡のシミュレーション 出生と死亡をシミュレーションして、擬似健康保険組合データを作成する。 2.2.1 出生のシミュレーション 2.2.2 死亡のシミュレーション 2.2.3 まとめ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]

[["index.html", "Python医療データ分析本をRでやる", " Python医療データ分析本をRでやる gg_hatano 2022-02-25 "],["00.html", "Chapter 1 はじめに 1.1 この本でやること 1.2 注意点", " Chapter 1 はじめに 1.1 この本でやること Pythonによる医療データ分析入門―pandas＋擬似レセプト編をRでやってみる、という内容です。 ソースコードはGitHubにも置いていきます。 1.2 注意点 Rでやるので、参考文献と比べて実装方針が異なるところはあると思います。 "],["01-01.html", "Chapter 2 死亡率の推定 2.1 日本版死亡データベースの取得・集計", " Chapter 2 死亡率の推定 1章です。 2.1 日本版死亡データベースの取得・集計 健保組合データを擬似生成するために、出生・志望の公的統計を利用する。 乱数でシミュレーションするために必要な情報を集計して求める。 2.1.1 出生率データの取得 IPSSが公開している、年次出生数のデータを利用する。 library(readr) library(dplyr) url = &#39;http://www.ipss.go.jp/p-toukei/JMD/00/STATS/Births.txt&#39; dat = read.table(url, skip=2, header = TRUE) dat %&gt;% head ## Year Female Male Total ## 1 1947 1301806 1376986 2678792 ## 2 1948 1303060 1378564 2681624 ## 3 1949 1316630 1380008 2696638 ## 4 1950 1134396 1203111 2337507 ## 5 1951 1043048 1094641 2137689 ## 6 1952 977101 1028061 2005162 ある年に、FemaleとMaleが何人生まれたかのデータになっている。 乱数を利用して、誕生年と性別をサンプリングしたい。性別列を作って縦に持っておく。 library(tidyr) library(magrittr) dat %&gt;% pivot_longer(cols = c(&quot;Male&quot;, &quot;Female&quot;), names_to = &quot;Sex&quot;, values_to = &quot;Life&quot;) %&gt;% mutate(Sex = if_else(Sex == &quot;Female&quot;, &quot;F&quot;, &quot;M&quot;)) -&gt; dat dat ## # A tibble: 146 × 4 ## Year Total Sex Life ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 1947 2678792 M 1376986 ## 2 1947 2678792 F 1301806 ## 3 1948 2681624 M 1378564 ## 4 1948 2681624 F 1303060 ## 5 1949 2696638 M 1380008 ## 6 1949 2696638 F 1316630 ## 7 1950 2337507 M 1203111 ## 8 1950 2337507 F 1134396 ## 9 1951 2137689 M 1094641 ## 10 1951 2137689 F 1043048 ## # … with 136 more rows 乱数でシミュレーションをするために、累積比率を出しておく dat %&lt;&gt;% arrange(Sex, Year) dat %&lt;&gt;% mutate(ratio = Life / sum(Life)) %&gt;% mutate(cum_sum = cumsum(ratio)) dat %&gt;% select(-Total) %&gt;% write.csv(&quot;./data/ipss_birth.csv&quot;, row.names=FALSE, quote = FALSE) ## 内容確認 dat %&gt;% select(-Total) %&gt;% head(100) ## # A tibble: 100 × 5 ## Year Sex Life ratio cum_sum ## &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1947 F 1301806 0.0118 0.0118 ## 2 1948 F 1303060 0.0119 0.0237 ## 3 1949 F 1316630 0.0120 0.0357 ## 4 1950 F 1134396 0.0103 0.0460 ## 5 1951 F 1043048 0.00949 0.0555 ## 6 1952 F 977101 0.00889 0.0644 ## 7 1953 F 910516 0.00829 0.0727 ## 8 1954 F 858368 0.00781 0.0805 ## 9 1955 F 841022 0.00765 0.0882 ## 10 1956 F 809194 0.00736 0.0955 ## # … with 90 more rows 累積確率分布を作る。これにより、一様乱数(y軸:0-1)から、対応する行番号が得られて、 行番号から、(出生年,性別)を得ることができる。 欲しい人数分だけ一様乱数を取れば、出生のデータが得られる。 library(ggplot2) dat = read_csv(&quot;./data/ipss_birth.csv&quot;) ## Rows: 146 Columns: 5 ## ─ Column specification ────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): Sex ## dbl (4): Year, Life, ratio, cum_sum ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. dat %&gt;% mutate(x_axis = paste(Year, Sex, sep=&quot;&quot;)) %&gt;% mutate(row_num = 1:nrow(.)) %&gt;% ggplot() + geom_line(aes(x = row_num, y = cum_sum), stat = &quot;identity&quot;) + annotate(&quot;segment&quot;,x=1,xend=96,y=0.7,yend=0.7,colour=&quot;blue&quot;, size=1, arrow=arrow()) + annotate(&quot;segment&quot;,x=98,xend=98,y=0.7,yend=0.0,colour=&quot;blue&quot;, size=1,arrow=arrow()) + annotate(&quot;text&quot;, x=20, y=0.75, parse=TRUE, label=&quot;&#39;Random Number 0.7&#39;&quot;) + annotate(&quot;text&quot;, x=125, y=0.2, parse=TRUE, label=&quot;&#39;Rownum: 98 -&gt; 1971-Male&#39;&quot;) + ggtitle(&quot;Cumulative ratio of Population Birth&quot;) これを利用して、出生のシミュレーションができる。 2.1.2 死亡データの取得と整形 次は、死亡率を算出して、死亡のシミュレーションを行う。 url_death_rate = &quot;http://www.ipss.go.jp/p-toukei/JMD/00/STATS/Mx_1x1.txt&quot; dat = read.table(url_death_rate, skip=2, header = TRUE) dat %&gt;% str ## &#39;data.frame&#39;: 8103 obs. of 5 variables: ## $ Year : int 1947 1947 1947 1947 1947 1947 1947 1947 1947 1947 ... ## $ Age : chr &quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; ... ## $ Female: chr &quot;0.087401&quot; &quot;0.033723&quot; &quot;0.016994&quot; &quot;0.011412&quot; ... ## $ Male : chr &quot;0.099181&quot; &quot;0.034697&quot; &quot;0.016804&quot; &quot;0.011461&quot; ... ## $ Total : chr &quot;0.093432&quot; &quot;0.034220&quot; &quot;0.016897&quot; &quot;0.011437&quot; ... 死亡率のデータは、Year年にX才だった人が1年後に死んでいる確率を表している。(本当に？) 今回は簡単のために、2016年の死亡率でシミュレーションを行う。 dat %&lt;&gt;% filter(Year == 2016) %&gt;% select(-Year) %&gt;% select(-Total) Ageがcharになっているので、確認する。 dat$Age %&gt;% table ## . ## 0 1 10 100 101 102 103 104 105 106 107 108 109 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 11 110+ 12 13 14 15 16 17 18 19 2 20 21 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 22 23 24 25 26 27 28 29 3 30 31 32 33 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 34 35 36 37 38 39 4 40 41 42 43 44 45 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 46 47 48 49 5 50 51 52 53 54 55 56 57 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 58 59 6 60 61 62 63 64 65 66 67 68 69 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 7 70 71 72 73 74 75 76 77 78 79 8 80 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 81 82 83 84 85 86 87 88 89 9 90 91 92 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 93 94 95 96 97 98 99 ## 1 1 1 1 1 1 1 110+があるので、これは簡単のために111才にしておく。 dat %&lt;&gt;% mutate(Age = if_else(Age == &quot;110+&quot;, &quot;111&quot;, Age)) %&gt;% mutate(Age = as.integer(Age)) dat %&lt;&gt;% mutate(Anb = Age) %&gt;% select(-Age) dat %&gt;% head ## Female Male Anb ## 1 0.002028 0.001995 0 ## 2 0.000313 0.000340 1 ## 3 0.000174 0.000178 2 ## 4 0.000098 0.000133 3 ## 5 0.000087 0.000095 4 ## 6 0.000084 0.000101 5 AnbとAlbについては、あとで追記する。Anbなので、Albに直す。 \\(x\\)才のAnb死亡率\\(q_x\\)とすると、Alb死亡率は、\\(\\frac{q_x+q_{x+1}}{2}\\)になる。 dat %&lt;&gt;% mutate(Female = as.numeric(Female)) %&gt;% mutate(Male = as.numeric(Male)) %&gt;% mutate(lead_Female = lead(Female)) %&gt;% mutate(lead_Male = lead(Male)) %&gt;% mutate(F = (Female + lead_Female)/2) %&gt;% mutate(M = (Male + lead_Male)/2) %&gt;% mutate(Alb = Anb) %&gt;% select(Alb,F,M) dat %&gt;% head ## Alb F M ## 1 0 0.0011705 0.0011675 ## 2 1 0.0002435 0.0002590 ## 3 2 0.0001360 0.0001555 ## 4 3 0.0000925 0.0001140 ## 5 4 0.0000855 0.0000980 ## 6 5 0.0000815 0.0001060 年次死亡率を可視化してみる。 横軸が年齢、縦軸が1年以内に死亡する確率。 dat %&gt;% pivot_longer(cols=c(&quot;F&quot;,&quot;M&quot;), names_to = &quot;Sex&quot;, values_to = &quot;Mortarity&quot;) %&gt;% ggplot(aes(x = Alb, y = Mortarity, group = Sex, color = Sex)) + geom_line() + geom_hline(yintercept = 1.0, linetype = &quot;dashed&quot;) + annotate(&quot;text&quot;, x = 10, y = 1.05, label = &#39;Mortarity: 1.0&#39;) + ggtitle(&quot;Mortarity&quot;) ## Warning: Removed 2 row(s) containing missing values (geom_path). 高齢部分が不自然だが、そういうものらしい。100才以上は使わない、として切り捨てる。 また、年次死亡率を月次死亡率に変換する。 年次死亡率を\\(y\\)、月次死亡率を\\(x\\)とすると、 \\(y = 1 - (1-x)^{12}\\)なので、\\(x\\)について解くと、\\(x = 1 - (1-y)^{0.08...}\\)になる。これにより、月次死亡率が得られる。 dat %&lt;&gt;% filter(Alb &lt; 100) dat %&lt;&gt;% mutate(F = 1 - (1-F)**(1/12)) %&gt;% mutate(M = 1 - (1-M)**(1/12)) dat %&gt;% write.csv(&quot;./data/ipss_mortality.csv&quot;, quote=F, row.names = F) dat %&gt;% mutate(F = round(F, 7)) %&gt;% mutate(M = round(M, 7)) %&gt;% head ## Alb F M ## 1 0 9.76e-05 9.73e-05 ## 2 1 2.03e-05 2.16e-05 ## 3 2 1.13e-05 1.30e-05 ## 4 3 7.70e-06 9.50e-06 ## 5 4 7.10e-06 8.20e-06 ## 6 5 6.80e-06 8.80e-06 おわり 2.1.3 ここまでやったこと 公的統計の取得 出生率データの作成 死亡率データの作成 2.1.4 つぎにやること 擬似レセプトデータを作るために… - 出生のシミュレーション - 死亡のシミュレーシ "],["01-02.html", "2.2 出生・死亡のシミュレーション", " 2.2 出生・死亡のシミュレーション 出生と死亡をシミュレーションして、擬似健康保険組合データを作成する。 2.2.1 関数を定義する library(magrittr) library(dplyr) library(stringr) library(purrr) ym_to_t = function(yyyymm = &quot;2022/06&quot;){ #&#39; transform YYYY/MM to time value #&#39; #&#39; @param yyyymm character : YYYY/MM or YYYY/M #&#39; @usage ym_to_t(yyyymm) #&#39; @return character (time value) tmp = yyyymm %&gt;% str_split(&quot;/&quot;) %&gt;% .[[1]] %&gt;% as.numeric() tmp[2] = tmp[2] - 0.5 tmp[2] = tmp[2] / 12 return(as.character(sum(tmp))) } t_to_ym = function(time){ #&#39; transform time value to YYYY/MM #&#39; #&#39; @param time string or numeric : year value (ex. 2022) + month value (ex.0.3), #&#39; @usage t_to_ym(time) #&#39; @return character : &quot;YYYY/MM&quot; time = as.numeric(time) year = as.integer(time) month = as.integer( (time - year) * 12 ) + 1 month = max(min(month, 12), 1) paste(year, sprintf(&quot;%02d&quot;, month), sep = &quot;/&quot;) %&gt;% return } tmp = c(&quot;2222/6&quot;, &quot;2022/5&quot;) df = data.frame(tmp1 = tmp) ## テスト df %&gt;% mutate(tmp2 = map_chr(.$tmp, ym_to_t)) %&gt;% mutate(tmp3 = map_chr(.$tmp2, t_to_ym)) ## tmp1 tmp2 tmp3 ## 1 2222/6 2222.45833333333 2222/06 ## 2 2022/5 2022.375 2022/05 2.2.2 出生のシミュレーション 出征シミュレーション用のデータ読み込み。(01-01で作成したもの) library(readr) df_birth = read_csv(&quot;./data/ipss_birth.csv&quot;) ## Rows: 146 Columns: 5 ## ─ Column specification ────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): Sex ## dbl (4): Year, Life, ratio, cum_sum ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df_birth %&gt;% head ## # A tibble: 6 × 5 ## Year Sex Life ratio cum_sum ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1947 F 1301806 0.0118 0.0118 ## 2 1948 F 1303060 0.0119 0.0237 ## 3 1949 F 1316630 0.0120 0.0357 ## 4 1950 F 1134396 0.0103 0.0460 ## 5 1951 F 1043048 0.00949 0.0555 ## 6 1952 F 977101 0.00889 0.0644 ## 0-1の値から、cumsumを参照して、行番号を返す仕組み vec = df_birth$cum_sum vec_ = c(0, vec[1:(length(vec)-1)]) dat_row = data.frame(row_num = 1:length(vec), left = vec_, right = vec) df_birth$left = vec_ df_birth$right = vec 擬似生成のためのパラメータを設定。 観察期間は、指数分布を使っていい感じに決める。 np.random.exponentialのmuと、rexpのrateは、逆数の関係らしいので、注意する。 ## 観察期間 start_study_t = 2010 ## 2010年1月 end_study_t = 2019.999 ## 2019年12月 mu = 10 ## 指数分布のパラメータ 観察開始/終了期間が決まる rate = 1/mu N = 5000 ## 全体の人数 family_ratio = 0.3 ## 被扶養者が占める割合 乱数で保険者を生成する。誕生年の分布は、df_birthに従うことにする。 N_ = N * 20 set.seed(71) random_value = runif(N_) df_exposure = data.frame(value = random_value) ## 誕生月判定と、曝露期間の設定 df_exposure = df_exposure %&gt;% merge(df_birth, all = TRUE) %&gt;% filter(left &lt;= value) %&gt;% filter(value &lt;= right) %&gt;% select(-left, -right, -value) %&gt;% mutate(value = runif(nrow(.))) %&gt;% mutate(value = Year + value) %&gt;% mutate(birth_ym = map_chr(value, t_to_ym)) %&gt;% mutate(value1 = rexp(nrow(.), rate = rate)) %&gt;% mutate(value2 = rexp(nrow(.), rate = rate)) %&gt;% mutate(start_t = start_study_t - mu + value1) %&gt;% mutate(end_t = start_t + value2) %&gt;% filter(start_t &gt;= start_study_t) %&gt;% filter(end_t &lt;= end_study_t) %&gt;% mutate(start_obs_ym = map_chr(start_t, t_to_ym)) %&gt;% mutate(end_obs_ym = map_chr(end_t, t_to_ym)) ## 被扶養者判定と、後処理 df_exposure = df_exposure %&gt;% mutate(value = runif(nrow(.))) %&gt;% mutate(family = if_else(value &lt; family_ratio, 2, 1 )) %&gt;% ## 1なら本人 select(-value, -value1, -value2, -start_t, -end_t) %&gt;% mutate(iid = 1:nrow(.)) %&gt;% mutate(iid = paste(&quot;i&quot;, sprintf(&quot;%06d&quot;, iid), sep = &quot;&quot;)) ## 整形 df_exposure = df_exposure %&gt;% select(iid, Sex, birth_ym, start_obs_ym, end_obs_ym) ## 行数の確保 df_exposure = df_exposure %&gt;% sample_n(size = N, replace = FALSE) df_exposure %&gt;% head ## iid Sex birth_ym start_obs_ym end_obs_ym ## 1 i000800 F 1955/11 2011/01 2016/09 ## 2 i005929 M 1959/01 2016/08 2018/03 ## 3 i003572 F 1996/02 2011/04 2015/01 ## 4 i007193 M 1975/02 2013/10 2019/12 ## 5 i007360 M 1976/10 2012/11 2014/12 ## 6 i001612 F 1967/04 2010/08 2013/08 2.2.2.1 出生比率の確認 df_birthで集計した真の誕生年比率と、擬似生成した誕生比率を比較してみる。 ## 擬似生成したデータの誕生年比率集計 df_reproducted_birth = df_exposure %&gt;% select(birth_ym) %&gt;% mutate(birth_year = as.integer(substr(birth_ym, 1, 4))) %&gt;% select(-birth_ym) %&gt;% group_by(birth_year) %&gt;% count() %&gt;% mutate(Reproducted_Ratio = n/N) %&gt;% mutate(Year = birth_year) %&gt;% ungroup() %&gt;% select(-n, -birth_year) %&gt;% select(Year, Reproducted_Ratio) df_reproducted_birth %&gt;% head ## # A tibble: 6 × 2 ## Year Reproducted_Ratio ## &lt;int&gt; &lt;dbl&gt; ## 1 1947 0.0258 ## 2 1948 0.029 ## 3 1949 0.0256 ## 4 1950 0.019 ## 5 1951 0.0194 ## 6 1952 0.0196 ## 真の誕生年比率の集計 df_true_birth = df_birth %&gt;% group_by(Year) %&gt;% summarise(True_Ratio = sum(ratio)) %&gt;% mutate(Year = as.integer(Year)) df_true_birth %&gt;% head ## # A tibble: 6 × 2 ## Year True_Ratio ## &lt;int&gt; &lt;dbl&gt; ## 1 1947 0.0244 ## 2 1948 0.0244 ## 3 1949 0.0245 ## 4 1950 0.0213 ## 5 1951 0.0195 ## 6 1952 0.0182 可視化します。 df_birth_compare = merge(df_reproducted_birth, df_true_birth, by = &quot;Year&quot;) library(tidyr) ## 縦持ちして、ggplotします df_birth_compare_long = df_birth_compare %&gt;% gather(group, value, -Year) library(ggplot2) df_birth_compare_long %&gt;% ggplot(aes(x = Year, y = value, color = group)) + geom_line() + ggtitle(&quot;Birth Ratio&quot;) + theme(legend.position = c(1, 1), legend.justification = c(1, 1)) …まあ、真の値から上下にブレている…かな…？ 1966年は丙午ですね。これで、出生のシミュレーションができました。 2.2.3 死亡のシミュレーション 次に、死亡をシミュレーションします。月次死亡率を取得します。 df_mortality = read_csv(&quot;data/ipss_mortality.csv&quot;) ## Rows: 100 Columns: 3 ## ─ Column specification ────────────────────── ## Delimiter: &quot;,&quot; ## dbl (3): Alb, F, M ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df_mortality %&lt;&gt;% gather(sex, mortality, -Alb) %&gt;% mutate(key = paste(Alb, sex, sep = &quot;_&quot;)) df_mortality %&gt;% head ## # A tibble: 6 × 4 ## Alb sex mortality key ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 0 F 0.0000976 0_F ## 2 1 F 0.0000203 1_F ## 3 2 F 0.0000113 2_F ## 4 3 F 0.00000771 3_F ## 5 4 F 0.00000713 4_F ## 6 5 F 0.00000679 5_F 年齢ごとに、一定確率で死亡するので、これをシミュレーションします。 ## 観察期間全体の期間を作成する date_vec = seq(as.Date(&quot;2010/01/01&quot;), as.Date(&quot;2019/12/01&quot;), by = &quot;month&quot;) df_month = data.frame(date = date_vec) df_month %&gt;% head ## date ## 1 2010-01-01 ## 2 2010-02-01 ## 3 2010-03-01 ## 4 2010-04-01 ## 5 2010-05-01 ## 6 2010-06-01 誕生日から年齢が計算できるので、各月で当該年齢の死亡率が得られて、乱数で死亡判定ができる。 ## 月次死亡確率を付与しておく df_exposure_mortality = df_exposure %&gt;% merge(df_month, all = True) %&gt;% mutate(birth_tmp = paste(birth_ym, &quot;/01&quot;, sep = &quot;&quot;)) %&gt;% mutate(age = (as.Date(date) - as.Date(birth_tmp)) / 365) %&gt;% mutate(age = as.integer(age)) %&gt;% mutate(key = paste(age, Sex, sep = &quot;_&quot;)) %&gt;% merge(df_mortality, by = &quot;key&quot;) %&gt;% select(-key, -Alb, -birth_tmp, -Sex) ## 乱数で、死亡判定をする df_death_date = df_exposure_mortality %&gt;% mutate(value = runif(nrow(.))) %&gt;% mutate(value = value) %&gt;% mutate(death_flg = value &lt; mortality) %&gt;% ## 乱数で死亡判定する arrange(iid, date) %&gt;% ## 最初に死亡した時を調べるために、idごとに処理する group_by(iid) %&gt;% mutate(val = cumsum(death_flg)) %&gt;% ## 最初に0-&gt;1になるところで死亡している mutate(val = cumsum(val)) %&gt;% ## 2回cumsumを取れば、↑は==1のところになる filter(val == 1) %&gt;% select(iid, death_date = date) ## 観察期間との整合性をとる。 ## 死亡していたら、観察期間は死亡日よりも前 ## 観察期間より前に死亡していたら、無視する (それより前に死亡している可能性もありそうだが...) df_exposure_death = df_exposure %&gt;% left_join(df_death_date, by = &quot;iid&quot;) %&gt;% mutate(start_obs_ym = paste(start_obs_ym, &quot;/01&quot;, sep = &quot;&quot;)) %&gt;% mutate(end_obs_ym = paste(end_obs_ym, &quot;/01&quot;, sep = &quot;&quot;)) %&gt;% mutate(birth_ym = paste(birth_ym, &quot;/01&quot;, sep = &quot;&quot;)) %&gt;% mutate(start_obs_ym = as.Date(start_obs_ym)) %&gt;% mutate(end_obs_ym = as.Date(end_obs_ym)) %&gt;% mutate(birth_ym = as.Date(birth_ym)) %&gt;% mutate(tmp = if_else(is.na(death_date), as.Date(&quot;2199/12/31&quot;), death_date)) %&gt;% mutate(end_obs_ym = if_else(end_obs_ym &gt; tmp, death_date - 30, end_obs_ym)) %&gt;% mutate(start_obs_ym = if_else(start_obs_ym &lt; birth_ym, birth_ym, start_obs_ym)) %&gt;% filter(start_obs_ym &lt; tmp) %&gt;% select(-tmp) ## 保存しておく df_exposure_death %&gt;% write.csv(&quot;./data/pseudo_medical_record.csv&quot;, quote = FALSE, row.names = FALSE) ## 内容確認 df_exposure_death %&gt;% head ## iid Sex birth_ym start_obs_ym end_obs_ym death_date ## 1 i000800 F 1955-11-01 2011-01-01 2016-09-01 &lt;NA&gt; ## 2 i005929 M 1959-01-01 2016-08-01 2018-03-01 &lt;NA&gt; ## 3 i003572 F 1996-02-01 2011-04-01 2015-01-01 &lt;NA&gt; ## 4 i007193 M 1975-02-01 2013-10-01 2016-04-01 2016-05-01 ## 5 i007360 M 1976-10-01 2012-11-01 2014-12-01 &lt;NA&gt; ## 6 i001612 F 1967-04-01 2010-08-01 2013-08-01 &lt;NA&gt; それっぽいものはできました…が、 - 観測期間後に死亡した人の扱い - 観測期間前に死亡した人の扱い について、調べておきます。 2.2.4 まとめ 公的統計のデータを用いて、出生、志望のシミュレーションをして、擬似データを生成しました。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
